<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/integration/kafka
           http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd
           http://www.springframework.org/schema/integration
           http://www.springframework.org/schema/integration/spring-integration.xsd"
           >

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>file:///etc/pnfs/nfs.properties</value>
                <value>file:///etc/pnfs/chimera.properties</value>
            </list>
        </property>
        <property name="environment">
            <bean class="org.springframework.core.env.StandardEnvironment" />
        </property>
    </bean>

    <import resource="community-common.xml"/>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <description>Database connection pool</description>
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="jdbcUrl" value="${chimera.db.url}"/>
                <property name="username" value="${chimera.db.user}"/>
                <property name="password" value="${chimera.db.password}"/>
                <property name="minimumIdle" value="${chimera.db.pool.min}"/>
                <property name="maximumPoolSize" value="${chimera.db.pool.max}"/>
                <property name="autoCommit" value="true"/>
            </bean>
        </constructor-arg>
    </bean>

    <!--
        NFSv4.1 pNFS Data Server manager
    -->
    <bean id="device-manager" class="org.dcache.nfs.DeviceManager">
        <description>Device manager</description>
        <property name="curatorFramework" ref="zk-curator" />
        <property name="vfs" ref="vfs-intern"/>
        <property name="cacheConfig" ref="cache-config" />
        <!-- <property name="layoutReturnConsumer" ref="layoutStats" /> autowired in profile layoutstats -->
        <property name="openStateidCache" ref="open-stateid" />
    </bean>

    <!--
        FileSystem engine. Currently only Chimera is supported
    -->
    <bean id="tx-manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <description>Database transaction manager</description>
        <property name="dataSource" ref="dataSource"/>
    </bean>

     <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
         <property name="dataSource" ref="dataSource" />
         <property name="changeLog" value="${chimera.db.changeset}" />
         <property name="contexts" value="production" />
     </bean>

     <bean id="fileSystem" class="org.dcache.chimera.JdbcFs" depends-on="liquibase">
        <description>Chimera Filesystem</description>
        <constructor-arg ref="dataSource" />
        <constructor-arg ref="tx-manager" />
    </bean>

    <bean id="vfs-intern" class="org.dcache.nfs.chimera.ChimeraVfs">
        <description>Chimera Filesystem</description>
        <constructor-arg ref="fileSystem"/>
        <constructor-arg ref="idmapd"/>
    </bean>

    <bean id="cache-config" class="org.dcache.nfs.vfs.VfsCacheConfig">
	<property name="maxEntries" value="${nfs.attribute-cache.size}" />
	<property name="lifeTime" value="${nfs.attribute-cache.time}" />
	<property name="timeUnit" value="${nfs.attribute-cache.unit}" />

	<property name="readdirMaxEntries" value="${nfs.readdir-cache.size}" />
	<property name="readdirLifeTime" value="${nfs.readdir-cache.time}" />
	<property name="readdirLifeTimeUnit" value="${nfs.readdir-cache.unit}" />
    </bean>

    <bean id="export" class="org.dcache.nfs.ExportFile">
        <description>Export file</description>
        <constructor-arg>
            <bean class="java.io.File">
                <constructor-arg value="/etc/pnfs/exports"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="export-init" class="org.dcache.nfs.ExportPathCreator" init-method="init">
        <property name="vfs" ref="vfs-intern"/>
        <property name="exportFile" ref="export" />
    </bean>

    <!--
        NFSv4.1 Operation factory
    -->
    <bean id="mds-op-executor-inner" class="org.dcache.nfs.v4.MDSOperationExecutor">
        <description>MDS operation executor</description>
    </bean>

    <bean id="mds-op-executor" class="org.dcache.nfs.MetricAwareOperationExecutor">
        <description>MDS operation executor with Metrics</description>
        <constructor-arg ref="mds-op-executor-inner"/>
    </bean>

    <bean id="idmapd" class="org.dcache.nfs.v4.SimpleIdMap" />

    <bean id="state-handler-id-factory" class="org.dcache.nfs.zk.ZkNfsStateHandler">
        <property name="base" value="/nfs/mds" />
        <property name="curatorFramework" ref="zk-curator" />
        <property name="storeName" value="state-handler-id" />
        <property name="identifier" value="${HOSTNAME}" />
    </bean>

    <bean id="state-handler-id" factory-bean="state-handler-id-factory" factory-method="getOrCreateId" />

    <bean id="state-handler" class="org.dcache.nfs.v4.NFSv4StateHandler">
        <description>NFSv4 client and state handler</description>
        <constructor-arg>
            <bean class="java.time.Duration" factory-method="ofSeconds">
                <constructor-arg index="0" value="${nfs.lease.time}"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="state-handler-id"/>
        <constructor-arg>
            <bean class="org.dcache.nfs.v4.BerkeleyDBClientStore" destroy-method="close">
                <constructor-arg value="${nfs.state.store}" />
            </bean>
        </constructor-arg>
    </bean>

    <!--
       NFSv4.1 MDS
    -->
    <bean id="mds" class="org.dcache.nfs.v4.NFSServerV41Factory" depends-on="export-init">
        <description>NFSv4.1 MDS server</description>
        <property name="operationExecutor" ref="mds-op-executor"/>
        <property name="deviceManager" ref="device-manager" />
        <property name="vfs" ref="device-manager" />
        <property name="exportFile" ref="export" />
        <property name="stateHandler" ref="state-handler"/>
    </bean>

    <!--
        ONC RPC service
    -->
    <bean id="oncrpcsvc-builder" class="org.dcache.oncrpc4j.spring.OncRpcSvcFactoryBean">
        <description>Onc RPC service builder for MDS</description>
        <property name="port" value="${NFS_PORT}"/>
        <property name="useTCP" value="true"/>
        <property name="autoPublish" value="false"/>
        <property name="enableJmx" value="true"/>
        <property name="useWorkerPool" value="true"/>
        <property name="sslContext" ref="ssl-context-builder" />
        <property name="enableStartTLS" value="true" />

        <!--
        <property name="gssSessionManager" ref="gss-manager" />
        -->
    </bean>

    <bean id="oncrpcsvc" class="org.dcache.oncrpc4j.rpc.OncRpcSvc"
          init-method="start" destroy-method="stop">
        <description>Onc RPC service for MDS</description>
        <constructor-arg ref="oncrpcsvc-builder"/>
        <property name="programs">
            <map>
                <entry key-ref="nfsv4-program" value-ref="mds"/>
            </map>
        </property>
    </bean>

    <beans profile="layoutstats">
        <bean id="iostat-kafka-template" class="org.springframework.kafka.core.KafkaTemplate">
             <constructor-arg>
                 <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                     <constructor-arg>
                         <map>
                             <entry key="bootstrap.servers" value="${KAFKA_BOOTSTRAP_SERVER}"/>
                             <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer" />
                             <entry key="value.serializer" value="org.dcache.nfs.IoStatSerializer" />
                         </map>
                     </constructor-arg>
                 </bean>
             </constructor-arg>
             <constructor-arg name="autoFlush" value="false" />
             <property name="defaultTopic" value="${KAFKA_IOSTAT_TOPIC}"/>
         </bean>

        <bean id="ioerr-kafka-template" class="org.springframework.kafka.core.KafkaTemplate">
             <constructor-arg>
                 <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                     <constructor-arg>
                         <map>
                             <entry key="bootstrap.servers" value="${KAFKA_BOOTSTRAP_SERVER}"/>
                             <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer" />
                             <entry key="value.serializer" value="org.dcache.nfs.IoErrorSerializer" />
                         </map>
                     </constructor-arg>
                 </bean>
             </constructor-arg>
             <constructor-arg name="autoFlush" value="false" />
             <property name="defaultTopic" value="${KAFKA_IOERR_TOPIC}"/>
         </bean>

         <bean name="layoutStats" class="org.dcache.nfs.KafkaLayoutReturnConsumer">
             <description>Layout return consumer</description>
             <property name="ioErrKafkaTemplate" ref="ioerr-kafka-template" />
             <property name="ioStatKafkaTemplate" ref="iostat-kafka-template" />
         </bean>
     </beans>

</beans>
